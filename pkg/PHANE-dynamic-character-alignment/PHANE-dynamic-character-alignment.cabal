Cabal-Version: 3.8
Name:          PHANE-dynamic-character-alignment
Version:       0.1.3
Stability:     Alpha
Build-Type:    Simple
Tested-With:
Tested-With:
  GHC == 9.6.2
  GHC == 9.4.6
  GHC == 9.2.8

Author:        Ward Wheeler <wheeler@amnh.org>
Copyright:     Â© 2015 Ward Wheeler and The American Museum of Natural History
License:       BSD-3-Clause
License-File:  doc/LICENSE

Maintainer:    Ward Wheeler <wheeler@amnh.org>
Homepage:      https://github.com/AMNH/PHANE/blob/main/doc/ReadMe/Dynamic-Character.md
Bug-Reports:   https://github.com/AMNH/PHANE/issues

Synopsis:      Library for performing string alignment on dynamic characters.

Description:
  Provides various metrics for scoring static characters and performing string alignment on dynamic characters.
  Please see the [README on GitHub](https://github.com/AMNH/PHANE/tree/main/pkg/PHANE-dynamic-character-alignment#readme).

Extra-Source-Files:
  ffi/external-direct-optimization/*.h

Source-Repository head
  Type:        git
  Location:    git://github.com/AMNH/PHANE.git
  Subdir:      pkg/PHANE-dynamic-character-alignment

Flag Enforce-Sanity
   Description: Ensure that all warnings are handled
   Default:     False
   Manual:      True

Flag Forego-Sanity
   Description: Disable extensive and helpful compiler warnings
   Default:     False
   Manual:      True

Flag Optimize
  Description: Compile with full optimizations
  Default:     False
  Manual:      True


-- Global build directives
Common build-defaults
  Default-Extensions:
    BangPatterns
    DerivingStrategies
    LambdaCase
    NoGeneralizedNewtypeDeriving
    UnicodeSyntax

  Default-Language:
    GHC2021

  If !flag(Forego-Sanity)
    GHC-Options:
      -- Sanity check warnings
      --   1. Include all warnings by default
      -Weverything
      --   2. Exclude the undesirable warnings
      -Wno-all-missed-specialisations
      -Wno-implicit-prelude
      -Wno-inferred-safe-imports
      -Wno-missing-import-lists
      -Wno-missing-kind-signatures
      -Wno-missing-safe-haskell-mode
      -Wno-monomorphism-restriction
      -Wno-redundant-bang-patterns
      -Wno-type-defaults
      -Wno-unsafe

  If flag(Enforce-Sanity)
    GHC-Options:
      -Werror


-- Global deviations from Haskell98
Common ffi-build-info

  CC-Options:
    -rdynamic --std=c11

  -- Here we list all directories that contain C & C++ header files that the FFI
  -- tools will need to locate when preprocessing the C files. Without listing
  -- the directories containing the C header files here, the FFI preprocessor
  -- (hsc2hs, c2hs, etc.) will fail to locate the requisite files. Note also,
  -- that the parent directory of the nessicary C & C++ header files must be
  -- specified. The preprocessor will not recursively look in subdirectories for
  -- header files!
  Include-Dirs:
    ffi/external-direct-optimization

  -- Specify the header files as required source files here.
  -- Do not specify them in the c-sources or cxx-sources stanzas.
  -- This is required for sdist and install commands to work correctly.
  Includes:
    alignCharacters.h
    alignmentMatrices.h
    c_alignment_interface.h
    c_code_alloc_setup.h
    costMatrix.h
    debug_constants.h
    dyn_character.h
    ukkCheckPoint.h
    ukkCommon.h

  C-Sources:
    ffi/external-direct-optimization/alignCharacters.c
    ffi/external-direct-optimization/alignmentMatrices.c
    ffi/external-direct-optimization/c_alignment_interface.c
    ffi/external-direct-optimization/c_code_alloc_setup.c
    ffi/external-direct-optimization/costMatrix.c
    ffi/external-direct-optimization/dyn_character.c
    ffi/external-direct-optimization/ukkCheckPoint.c
    ffi/external-direct-optimization/ukkCommon.c


Common ghc-flags

  Ghc-Options:
    -fdiagnostics-color=always
    -fhide-source-paths
    -j

  Ghc-Prof-Options:
    -fprof-auto
    -fprof-cafs
    -optc
    -rdynamic

  If !flag(Optimize)
    Ghc-Options:
      -O0
  Else
    Ghc-Options:
      -O2
      -threaded
      -- Optimization flags
      -fexcess-precision
      -fexpose-all-unfoldings
      -flate-specialise
      -fmax-simplifier-iterations=16
      -foptimal-applicative-do
      -fspec-constr-count=8
      -fspec-constr-keen
      -fspecialize-aggressively
      -fstatic-argument-transformation

  If !flag(Forego-Sanity)
    Ghc-Options:
      -- Sanity check warnings
      --   1. Include all warnings by default
      -Weverything
      --   2. Exclude the undesirable warnings
      -Wno-all-missed-specialisations
      -Wno-implicit-prelude
      -Wno-inferred-safe-imports
      -Wno-missing-import-lists
      -Wno-missing-safe-haskell-mode
      -Wno-monomorphism-restriction
      -Wno-redundant-bang-patterns
      -Wno-type-defaults
      -Wno-unsafe

  If !flag(Forego-Sanity) && impl(ghc >=9.2)
    Ghc-Options:
      -Wno-missing-kind-signatures

  If !flag(Forego-Sanity) && impl(ghc >=9.4)
    Ghc-Options:
      -Wno-redundant-strictness-flags


Library

  Import:
    build-defaults,
    ffi-build-info

  HS-Source-Dirs:
    src

  Build-Depends:
--    PHANE-alphabet,
    PHANE-dynamic-character,
    PHANE-dynamic-character-element,
    PHANE-measure-transition,
    PHANE-transition-matrix-ffi,
    PHANE-measure-units,
    base >= 4.11 && < 5.0,
--    bv-little,
    containers >= 0.6.2 && < 1.0,
--    deepseq >= 1.4 && < 2.0,
    matrices >= 0.5 && < 1.0,
    monad-loops >= 0.4 && < 1.0,
    primitive >= 0.7.1 && < 1.0,
    vector >= 0.12.0.3 && < 1.0,

  Exposed-Modules:
    DirectOptimization.Pairwise
    DirectOptimization.Pairwise.Visualization
    DirectOptimization.Pairwise.Swapping
    DirectOptimization.Pairwise.Ukkonen
    DirectOptimization.PreOrder

  Other-Modules:
    DirectOptimization.Pairwise.Direction
    DirectOptimization.Pairwise.Huge
    DirectOptimization.Pairwise.Internal
    DirectOptimization.Pairwise.Slim
    DirectOptimization.Pairwise.Slim.FFI
    DirectOptimization.Pairwise.Wide
